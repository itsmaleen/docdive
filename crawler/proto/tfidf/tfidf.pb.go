// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.6.1
// source: proto/tfidf.proto

package tfidf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CleanTextRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CleanTextRequest) Reset() {
	*x = CleanTextRequest{}
	mi := &file_proto_tfidf_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanTextRequest) ProtoMessage() {}

func (x *CleanTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tfidf_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanTextRequest.ProtoReflect.Descriptor instead.
func (*CleanTextRequest) Descriptor() ([]byte, []int) {
	return file_proto_tfidf_proto_rawDescGZIP(), []int{0}
}

func (x *CleanTextRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type CleanTextResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CleanedText   string                 `protobuf:"bytes,1,opt,name=cleaned_text,json=cleanedText,proto3" json:"cleaned_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CleanTextResponse) Reset() {
	*x = CleanTextResponse{}
	mi := &file_proto_tfidf_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanTextResponse) ProtoMessage() {}

func (x *CleanTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tfidf_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanTextResponse.ProtoReflect.Descriptor instead.
func (*CleanTextResponse) Descriptor() ([]byte, []int) {
	return file_proto_tfidf_proto_rawDescGZIP(), []int{1}
}

func (x *CleanTextResponse) GetCleanedText() string {
	if x != nil {
		return x.CleanedText
	}
	return ""
}

type TopTermsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Documents     []string               `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
	MaxFeatures   int32                  `protobuf:"varint,2,opt,name=max_features,json=maxFeatures,proto3" json:"max_features,omitempty"`
	TopN          int32                  `protobuf:"varint,3,opt,name=top_n,json=topN,proto3" json:"top_n,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopTermsRequest) Reset() {
	*x = TopTermsRequest{}
	mi := &file_proto_tfidf_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopTermsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopTermsRequest) ProtoMessage() {}

func (x *TopTermsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tfidf_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopTermsRequest.ProtoReflect.Descriptor instead.
func (*TopTermsRequest) Descriptor() ([]byte, []int) {
	return file_proto_tfidf_proto_rawDescGZIP(), []int{2}
}

func (x *TopTermsRequest) GetDocuments() []string {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *TopTermsRequest) GetMaxFeatures() int32 {
	if x != nil {
		return x.MaxFeatures
	}
	return 0
}

func (x *TopTermsRequest) GetTopN() int32 {
	if x != nil {
		return x.TopN
	}
	return 0
}

type TopTermsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Documents     []*DocumentTerms       `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopTermsResponse) Reset() {
	*x = TopTermsResponse{}
	mi := &file_proto_tfidf_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopTermsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopTermsResponse) ProtoMessage() {}

func (x *TopTermsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tfidf_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopTermsResponse.ProtoReflect.Descriptor instead.
func (*TopTermsResponse) Descriptor() ([]byte, []int) {
	return file_proto_tfidf_proto_rawDescGZIP(), []int{3}
}

func (x *TopTermsResponse) GetDocuments() []*DocumentTerms {
	if x != nil {
		return x.Documents
	}
	return nil
}

type DocumentTerms struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Terms         []string               `protobuf:"bytes,1,rep,name=terms,proto3" json:"terms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DocumentTerms) Reset() {
	*x = DocumentTerms{}
	mi := &file_proto_tfidf_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentTerms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentTerms) ProtoMessage() {}

func (x *DocumentTerms) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tfidf_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentTerms.ProtoReflect.Descriptor instead.
func (*DocumentTerms) Descriptor() ([]byte, []int) {
	return file_proto_tfidf_proto_rawDescGZIP(), []int{4}
}

func (x *DocumentTerms) GetTerms() []string {
	if x != nil {
		return x.Terms
	}
	return nil
}

type CoOccurrenceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Documents     []string               `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
	WindowSize    int32                  `protobuf:"varint,2,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"`
	TopN          int32                  `protobuf:"varint,3,opt,name=top_n,json=topN,proto3" json:"top_n,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoOccurrenceRequest) Reset() {
	*x = CoOccurrenceRequest{}
	mi := &file_proto_tfidf_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoOccurrenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoOccurrenceRequest) ProtoMessage() {}

func (x *CoOccurrenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tfidf_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoOccurrenceRequest.ProtoReflect.Descriptor instead.
func (*CoOccurrenceRequest) Descriptor() ([]byte, []int) {
	return file_proto_tfidf_proto_rawDescGZIP(), []int{5}
}

func (x *CoOccurrenceRequest) GetDocuments() []string {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *CoOccurrenceRequest) GetWindowSize() int32 {
	if x != nil {
		return x.WindowSize
	}
	return 0
}

func (x *CoOccurrenceRequest) GetTopN() int32 {
	if x != nil {
		return x.TopN
	}
	return 0
}

type CoOccurrenceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pairs         []*TermPair            `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoOccurrenceResponse) Reset() {
	*x = CoOccurrenceResponse{}
	mi := &file_proto_tfidf_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoOccurrenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoOccurrenceResponse) ProtoMessage() {}

func (x *CoOccurrenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tfidf_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoOccurrenceResponse.ProtoReflect.Descriptor instead.
func (*CoOccurrenceResponse) Descriptor() ([]byte, []int) {
	return file_proto_tfidf_proto_rawDescGZIP(), []int{6}
}

func (x *CoOccurrenceResponse) GetPairs() []*TermPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type TermPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term1         string                 `protobuf:"bytes,1,opt,name=term1,proto3" json:"term1,omitempty"`
	Term2         string                 `protobuf:"bytes,2,opt,name=term2,proto3" json:"term2,omitempty"`
	Count         int32                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TermPair) Reset() {
	*x = TermPair{}
	mi := &file_proto_tfidf_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TermPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermPair) ProtoMessage() {}

func (x *TermPair) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tfidf_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermPair.ProtoReflect.Descriptor instead.
func (*TermPair) Descriptor() ([]byte, []int) {
	return file_proto_tfidf_proto_rawDescGZIP(), []int{7}
}

func (x *TermPair) GetTerm1() string {
	if x != nil {
		return x.Term1
	}
	return ""
}

func (x *TermPair) GetTerm2() string {
	if x != nil {
		return x.Term2
	}
	return ""
}

func (x *TermPair) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TermClustersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Documents     []string               `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
	NClusters     int32                  `protobuf:"varint,2,opt,name=n_clusters,json=nClusters,proto3" json:"n_clusters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TermClustersRequest) Reset() {
	*x = TermClustersRequest{}
	mi := &file_proto_tfidf_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TermClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermClustersRequest) ProtoMessage() {}

func (x *TermClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tfidf_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermClustersRequest.ProtoReflect.Descriptor instead.
func (*TermClustersRequest) Descriptor() ([]byte, []int) {
	return file_proto_tfidf_proto_rawDescGZIP(), []int{8}
}

func (x *TermClustersRequest) GetDocuments() []string {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *TermClustersRequest) GetNClusters() int32 {
	if x != nil {
		return x.NClusters
	}
	return 0
}

type TermClustersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clusters      map[int32]*TermGroup   `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TermClustersResponse) Reset() {
	*x = TermClustersResponse{}
	mi := &file_proto_tfidf_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TermClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermClustersResponse) ProtoMessage() {}

func (x *TermClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tfidf_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermClustersResponse.ProtoReflect.Descriptor instead.
func (*TermClustersResponse) Descriptor() ([]byte, []int) {
	return file_proto_tfidf_proto_rawDescGZIP(), []int{9}
}

func (x *TermClustersResponse) GetClusters() map[int32]*TermGroup {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type TermGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Terms         []string               `protobuf:"bytes,1,rep,name=terms,proto3" json:"terms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TermGroup) Reset() {
	*x = TermGroup{}
	mi := &file_proto_tfidf_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TermGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermGroup) ProtoMessage() {}

func (x *TermGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tfidf_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermGroup.ProtoReflect.Descriptor instead.
func (*TermGroup) Descriptor() ([]byte, []int) {
	return file_proto_tfidf_proto_rawDescGZIP(), []int{10}
}

func (x *TermGroup) GetTerms() []string {
	if x != nil {
		return x.Terms
	}
	return nil
}

var File_proto_tfidf_proto protoreflect.FileDescriptor

var file_proto_tfidf_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x66, 0x69, 0x64, 0x66, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x66, 0x69, 0x64, 0x66, 0x22, 0x26, 0x0a, 0x10, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x36, 0x0a, 0x11, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x65, 0x61, 0x6e,
	0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x22, 0x67, 0x0a, 0x0f, 0x54, 0x6f,
	0x70, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x13,
	0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x6f, 0x70, 0x4e, 0x22, 0x46, 0x0a, 0x10, 0x54, 0x6f, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x66, 0x69,
	0x64, 0x66, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73,
	0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x25, 0x0a, 0x0d, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x22, 0x69, 0x0a, 0x13, 0x43, 0x6f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4e, 0x22, 0x3d, 0x0a,
	0x14, 0x43, 0x6f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x66, 0x69, 0x64, 0x66, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0x4c, 0x0a, 0x08,
	0x54, 0x65, 0x72, 0x6d, 0x50, 0x61, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x31, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x65, 0x72, 0x6d, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x13, 0x54, 0x65,
	0x72, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xac,
	0x01, 0x0a, 0x14, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x66, 0x69, 0x64,
	0x66, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x4d,
	0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x66, 0x69, 0x64, 0x66, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x21, 0x0a,
	0x09, 0x54, 0x65, 0x72, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x32, 0xaf, 0x02, 0x0a, 0x0c, 0x54, 0x46, 0x49, 0x44, 0x46, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x40, 0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x17,
	0x2e, 0x74, 0x66, 0x69, 0x64, 0x66, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x66, 0x69, 0x64, 0x66, 0x2e,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x12, 0x16, 0x2e, 0x74, 0x66, 0x69, 0x64, 0x66, 0x2e, 0x54, 0x6f, 0x70, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x66, 0x69,
	0x64, 0x66, 0x2e, 0x54, 0x6f, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x4f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x74, 0x66, 0x69, 0x64,
	0x66, 0x2e, 0x43, 0x6f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x66, 0x69, 0x64, 0x66, 0x2e, 0x43, 0x6f,
	0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x74, 0x66, 0x69, 0x64, 0x66, 0x2e,
	0x54, 0x65, 0x72, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x66, 0x69, 0x64, 0x66, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x66, 0x69, 0x64,
	0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_tfidf_proto_rawDescOnce sync.Once
	file_proto_tfidf_proto_rawDescData []byte
)

func file_proto_tfidf_proto_rawDescGZIP() []byte {
	file_proto_tfidf_proto_rawDescOnce.Do(func() {
		file_proto_tfidf_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_tfidf_proto_rawDesc), len(file_proto_tfidf_proto_rawDesc)))
	})
	return file_proto_tfidf_proto_rawDescData
}

var file_proto_tfidf_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_tfidf_proto_goTypes = []any{
	(*CleanTextRequest)(nil),     // 0: tfidf.CleanTextRequest
	(*CleanTextResponse)(nil),    // 1: tfidf.CleanTextResponse
	(*TopTermsRequest)(nil),      // 2: tfidf.TopTermsRequest
	(*TopTermsResponse)(nil),     // 3: tfidf.TopTermsResponse
	(*DocumentTerms)(nil),        // 4: tfidf.DocumentTerms
	(*CoOccurrenceRequest)(nil),  // 5: tfidf.CoOccurrenceRequest
	(*CoOccurrenceResponse)(nil), // 6: tfidf.CoOccurrenceResponse
	(*TermPair)(nil),             // 7: tfidf.TermPair
	(*TermClustersRequest)(nil),  // 8: tfidf.TermClustersRequest
	(*TermClustersResponse)(nil), // 9: tfidf.TermClustersResponse
	(*TermGroup)(nil),            // 10: tfidf.TermGroup
	nil,                          // 11: tfidf.TermClustersResponse.ClustersEntry
}
var file_proto_tfidf_proto_depIdxs = []int32{
	4,  // 0: tfidf.TopTermsResponse.documents:type_name -> tfidf.DocumentTerms
	7,  // 1: tfidf.CoOccurrenceResponse.pairs:type_name -> tfidf.TermPair
	11, // 2: tfidf.TermClustersResponse.clusters:type_name -> tfidf.TermClustersResponse.ClustersEntry
	10, // 3: tfidf.TermClustersResponse.ClustersEntry.value:type_name -> tfidf.TermGroup
	0,  // 4: tfidf.TFIDFService.CleanText:input_type -> tfidf.CleanTextRequest
	2,  // 5: tfidf.TFIDFService.GetTopTerms:input_type -> tfidf.TopTermsRequest
	5,  // 6: tfidf.TFIDFService.GetCoOccurrences:input_type -> tfidf.CoOccurrenceRequest
	8,  // 7: tfidf.TFIDFService.GetTermClusters:input_type -> tfidf.TermClustersRequest
	1,  // 8: tfidf.TFIDFService.CleanText:output_type -> tfidf.CleanTextResponse
	3,  // 9: tfidf.TFIDFService.GetTopTerms:output_type -> tfidf.TopTermsResponse
	6,  // 10: tfidf.TFIDFService.GetCoOccurrences:output_type -> tfidf.CoOccurrenceResponse
	9,  // 11: tfidf.TFIDFService.GetTermClusters:output_type -> tfidf.TermClustersResponse
	8,  // [8:12] is the sub-list for method output_type
	4,  // [4:8] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_tfidf_proto_init() }
func file_proto_tfidf_proto_init() {
	if File_proto_tfidf_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_tfidf_proto_rawDesc), len(file_proto_tfidf_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_tfidf_proto_goTypes,
		DependencyIndexes: file_proto_tfidf_proto_depIdxs,
		MessageInfos:      file_proto_tfidf_proto_msgTypes,
	}.Build()
	File_proto_tfidf_proto = out.File
	file_proto_tfidf_proto_goTypes = nil
	file_proto_tfidf_proto_depIdxs = nil
}
