// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: proto/tfidf.proto

package tfidf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TFIDFService_CleanText_FullMethodName        = "/tfidf.TFIDFService/CleanText"
	TFIDFService_GetTopTerms_FullMethodName      = "/tfidf.TFIDFService/GetTopTerms"
	TFIDFService_GetCoOccurrences_FullMethodName = "/tfidf.TFIDFService/GetCoOccurrences"
	TFIDFService_GetTermClusters_FullMethodName  = "/tfidf.TFIDFService/GetTermClusters"
)

// TFIDFServiceClient is the client API for TFIDFService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TFIDFServiceClient interface {
	CleanText(ctx context.Context, in *CleanTextRequest, opts ...grpc.CallOption) (*CleanTextResponse, error)
	GetTopTerms(ctx context.Context, in *TopTermsRequest, opts ...grpc.CallOption) (*TopTermsResponse, error)
	GetCoOccurrences(ctx context.Context, in *CoOccurrenceRequest, opts ...grpc.CallOption) (*CoOccurrenceResponse, error)
	GetTermClusters(ctx context.Context, in *TermClustersRequest, opts ...grpc.CallOption) (*TermClustersResponse, error)
}

type tFIDFServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTFIDFServiceClient(cc grpc.ClientConnInterface) TFIDFServiceClient {
	return &tFIDFServiceClient{cc}
}

func (c *tFIDFServiceClient) CleanText(ctx context.Context, in *CleanTextRequest, opts ...grpc.CallOption) (*CleanTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanTextResponse)
	err := c.cc.Invoke(ctx, TFIDFService_CleanText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFIDFServiceClient) GetTopTerms(ctx context.Context, in *TopTermsRequest, opts ...grpc.CallOption) (*TopTermsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopTermsResponse)
	err := c.cc.Invoke(ctx, TFIDFService_GetTopTerms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFIDFServiceClient) GetCoOccurrences(ctx context.Context, in *CoOccurrenceRequest, opts ...grpc.CallOption) (*CoOccurrenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoOccurrenceResponse)
	err := c.cc.Invoke(ctx, TFIDFService_GetCoOccurrences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tFIDFServiceClient) GetTermClusters(ctx context.Context, in *TermClustersRequest, opts ...grpc.CallOption) (*TermClustersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TermClustersResponse)
	err := c.cc.Invoke(ctx, TFIDFService_GetTermClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TFIDFServiceServer is the server API for TFIDFService service.
// All implementations must embed UnimplementedTFIDFServiceServer
// for forward compatibility.
type TFIDFServiceServer interface {
	CleanText(context.Context, *CleanTextRequest) (*CleanTextResponse, error)
	GetTopTerms(context.Context, *TopTermsRequest) (*TopTermsResponse, error)
	GetCoOccurrences(context.Context, *CoOccurrenceRequest) (*CoOccurrenceResponse, error)
	GetTermClusters(context.Context, *TermClustersRequest) (*TermClustersResponse, error)
	mustEmbedUnimplementedTFIDFServiceServer()
}

// UnimplementedTFIDFServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTFIDFServiceServer struct{}

func (UnimplementedTFIDFServiceServer) CleanText(context.Context, *CleanTextRequest) (*CleanTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanText not implemented")
}
func (UnimplementedTFIDFServiceServer) GetTopTerms(context.Context, *TopTermsRequest) (*TopTermsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopTerms not implemented")
}
func (UnimplementedTFIDFServiceServer) GetCoOccurrences(context.Context, *CoOccurrenceRequest) (*CoOccurrenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoOccurrences not implemented")
}
func (UnimplementedTFIDFServiceServer) GetTermClusters(context.Context, *TermClustersRequest) (*TermClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTermClusters not implemented")
}
func (UnimplementedTFIDFServiceServer) mustEmbedUnimplementedTFIDFServiceServer() {}
func (UnimplementedTFIDFServiceServer) testEmbeddedByValue()                      {}

// UnsafeTFIDFServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TFIDFServiceServer will
// result in compilation errors.
type UnsafeTFIDFServiceServer interface {
	mustEmbedUnimplementedTFIDFServiceServer()
}

func RegisterTFIDFServiceServer(s grpc.ServiceRegistrar, srv TFIDFServiceServer) {
	// If the following call pancis, it indicates UnimplementedTFIDFServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TFIDFService_ServiceDesc, srv)
}

func _TFIDFService_CleanText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFIDFServiceServer).CleanText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TFIDFService_CleanText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFIDFServiceServer).CleanText(ctx, req.(*CleanTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFIDFService_GetTopTerms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopTermsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFIDFServiceServer).GetTopTerms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TFIDFService_GetTopTerms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFIDFServiceServer).GetTopTerms(ctx, req.(*TopTermsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFIDFService_GetCoOccurrences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFIDFServiceServer).GetCoOccurrences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TFIDFService_GetCoOccurrences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFIDFServiceServer).GetCoOccurrences(ctx, req.(*CoOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TFIDFService_GetTermClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TermClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TFIDFServiceServer).GetTermClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TFIDFService_GetTermClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TFIDFServiceServer).GetTermClusters(ctx, req.(*TermClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TFIDFService_ServiceDesc is the grpc.ServiceDesc for TFIDFService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TFIDFService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tfidf.TFIDFService",
	HandlerType: (*TFIDFServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CleanText",
			Handler:    _TFIDFService_CleanText_Handler,
		},
		{
			MethodName: "GetTopTerms",
			Handler:    _TFIDFService_GetTopTerms_Handler,
		},
		{
			MethodName: "GetCoOccurrences",
			Handler:    _TFIDFService_GetCoOccurrences_Handler,
		},
		{
			MethodName: "GetTermClusters",
			Handler:    _TFIDFService_GetTermClusters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tfidf.proto",
}
